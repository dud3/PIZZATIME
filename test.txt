// Adopt this to pizza_party.c problem, since we devided into groups,
now just send and recieve pizza slices, between two rooms(girls and guys)
but add some sleep() to girls so they will keep the process a little bit more bussy than guys, this part of the assignment solved...  

  int ping_pong_count = 0; // 0
  
int partner_rank = (world_rank + 1) % 2; 
// 0 + 1 % 2 = 1
// 1 + 1 % 2 = 0
  while (ping_pong_count < PING_PONG_LIMIT) {
  // PING_PONG_LIMI = 10 
  // 0 < 10 , 1 < 10 ... 10 < 10
    
    if (world_rank == ping_pong_count % 2) {
      // 0 == 0 % 2 -> 0 == 0 true 
      // 0 == 1 % 2 -> 0 == 1 false
      // 0 == 2 % 2 -> 0 == 0 true 
      // 0 == 3 % 2 -> 0 == 1 flase 
      // ...
      // 0 == 10 % 2 -> 0 == 0 true

      // Increment the ping pong count before you send it
      ping_pong_count++; 
      // 0 == 0 % 2 -> 0 == 0 true 
      // ping_pong_count = 0 + 1 -> ping_pong_count = 1
      // 

      MPI_Send(&ping_pong_count, 1, MPI_INT, partner_rank, 0,
               MPI_COMM_WORLD);
      // The whole tick is here, since ->
      // partner_rank = (world_rank + 1) % 2 ->
      // partner_rank = (0 + 1) % 2 = 1 and ->
      // partnet_rank = (1 + 1) % 2 = 0 so...
      // 0 becomes 1, and 1 becomes 0
      // that's why 1(actually 0) sends even numnbers to 0(actually 1)
      // and vice versa 0(actually 1) sends even numbers to 1(actually 0)
      
      printf("%d sent and incremented ping_pong_count "
             "%d to %d\n", world_rank, ping_pong_count,
             partner_rank);
    } else {
      MPI_Recv(&ping_pong_count, 1, MPI_INT, partner_rank, 0,
               MPI_COMM_WORLD, MPI_STATUS_IGNORE);
      printf("%d received ping_pong_count %d from %d\n",
             world_rank, ping_pong_count, partner_rank);
    }
  }
